diff --git a/netlify/functions/airtable.js b/netlify/functions/airtable.js
index 1234567..89abcde 100644
--- a/netlify/functions/airtable.js
+++ b/netlify/functions/airtable.js
@@ case 'getCloneQuestions':
-    {
-        const testNumber = event.queryStringParameters.testNumber || '';
-        const questionNumber = event.queryStringParameters.questionNumber || '';
-        if (!testNumber || !questionNumber) {
-            return formatResponse(400, 'Missing testNumber or questionNumber');
-        }
-
-        try {
-            const clones = await base('CopyCats')
-                .select({
-                    filterByFormula: `{Original Question} = '${testNumber} - ${questionNumber}'`,
-                    fields: ['Corrected Clone Question LM']
-                })
-                .all()
-                .then(records => {
-                    return records.map(r => r.get('Corrected Clone Question LM').trim()).filter(Boolean);
-                });
-
-            return formatResponse(200, clones);
-        } catch (error) {
-            console.error('Error fetching clones:', error);
-            return formatResponse(500, { error: error.message });
-        }
-    }
+    {
+        const testNumber = event.queryStringParameters.testNumber || '';
+        const questionNumber = event.queryStringParameters.questionNumber || '';
+        if (!testNumber || !questionNumber) {
+            return formatResponse(400, 'Missing testNumber or questionNumber');
+        }
+
+        // Build formula: match Original Question to "testNumber - questionNumber"
+        const filterFormula = `FIND('${testNumber} - ${questionNumber}', ARRAYJOIN({Original Question}, ','))`;
+
+        try {
+            let clones = await base('CopyCats')
+                .select({
+                    filterByFormula: filterFormula,
+                    fields: ['Corrected Clone Question LM', 'AI Model']
+                })
+                .all()
+                .then(records => {
+                    return records.map(r => ({
+                        clone: r.get('Corrected Clone Question LM') || '',
+                        model: r.get('AI Model') || 'No Model'
+                    }));
+                });
+
+            return formatResponse(200, clones);
+        } catch (error) {
+            console.error('Error fetching clones:', error);
+            return formatResponse(500, { error: error.message });
+        }
+    }
diff --git a/HTML CopyCat/CopyCats.html b/HTML CopyCat/CopyCats.html
index 1234567..89abcde 100644
--- a/HTML CopyCat/CopyCats.html
+++ b/HTML CopyCat/CopyCats.html
@@ In the <style> block:
-        #resultContainer img { max-width: 100%; }
+        #resultContainer img { max-width: 100%; }
+        /* Restrict clone question text to 45 characters */
+        .cloneQuestion {
+            width: 45ch;
+            white-space: pre-wrap;  /* preserve line breaks */
+            word-wrap: break-word;  /* wrap long words */
+            margin-bottom: 1em;     /* spacing after each question */
+        }
@@ In the JavaScript rendering section:
-                if (clones.length > 0) {
-                    clones.forEach(clone => {
-                        const div = document.createElement('div');
-                        div.innerHTML = clone.replace(/(\r\n|\n|\r)/g, '<br>');
-                        container.appendChild(div);
-                    });
-                    MathJax.typesetPromise([container]).catch(err => console.error("MathJax Error:", err));
-                } else {
-                    container.innerHTML += '<p>No clone questions found.</p>';
-                }
+                if (Array.isArray(clones) && clones.length > 0) {
+                    clones.forEach(item => {
+                        // Create a header for the AI Model
+                        const modelHeader = document.createElement('h3');
+                        modelHeader.textContent = item.model || 'No Model';
+                        container.appendChild(modelHeader);
+
+                        // Create a div for the clone question text with restricted width
+                        const div = document.createElement('div');
+                        div.classList.add('cloneQuestion');
+                        div.innerHTML = (item.clone || 'No clone available').replace(/(\r\n|\n|\r)/g, '<br>');
+                        container.appendChild(div);
+                    });
+                    MathJax.typesetPromise([container]).catch(err => console.error("MathJax Error:", err));
+                } else {
+                    container.innerHTML += '<p>No clone questions found.</p>';
+                }